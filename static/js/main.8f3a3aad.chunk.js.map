{"version":3,"sources":["pool/components/Layout.jsx","pool/ActionButton.jsx","pool/ScoreCard.jsx","pool/components/WhoseTurnNow.jsx","pool/utils/shuffle.jsx","pool/Nineball.jsx","pool/Killer.jsx","pool/Player.js","pool/PlayerSelect.jsx","pool/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Vertical","styled","div","ActionButton","button","props","foul","miss","pot","nine","small","Cell","ScoreDiv","score","ScoreCard","players","killer","length","sort","a","b","map","p","key","name","WhoseTurnNow","ScoreButtonHolder","shuffle","array","counter","index","Math","floor","random","temp","count","PlayState","this","gameOver","playersCopy","idx","current","splice","previous","next","Nineball","home","useState","setPlayers","turnState","setTurnState","setPlayState","action","thisState","scoreFun","thisPlayers","find","reverse","slice","push","onClick","nextRound","handleTurnEnd","st","move","shift","includes","concat","toEnd","arr","Killer","newGame","i","setScores","useEffect","thisTurnState","player","findIndex","n","handleOut","style","width","Player","selected","PlayerHolder","PlayerUI","PS","PlayerInput","input","AddPlayerButton","playerRostom","PlayerSelect","callback","playerName","setPlayerName","onSubmit","e","preventDefault","newPlayer","addPlayer","type","value","onChange","target","pl","togglePlayer","filter","Home","mode","setMode","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f3a3aad.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Vertical = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ActionButton = styled.button`\r\n  box-sizing: border-box;\r\n  margin: 10px;\r\n  width: 25%;\r\n  height: 150px;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  border: solid 1px black;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n\r\n  h4 {\r\n    font-size: 24px;\r\n  }\r\n\r\n  ${props => `\r\n    ${props.foul ? `background-color: red;` : ``}\r\n    ${props.miss ? `background-color: orange;` : ``}\r\n    ${props.pot ? `background-color: lightskyblue;` : ``}\r\n    ${props.nine ? `background-color: limegreen;` : ``}\r\n\r\n    ${\r\n      props.small\r\n        ? `\r\n        font-size: 18px;\r\n        height: 50px;\r\n        width: 80px;\r\n      `\r\n        : ``\r\n    }\r\n\r\n    `}\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Cell = styled.div`\r\n  width: 50%;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n\r\n  &:not(:first-child) {\r\n    border-left: solid 1px black;\r\n  }\r\n`;\r\n\r\nconst ScoreDiv = styled.div`\r\n  margin: auto;\r\n  width: 400px;\r\n  display: flex;\r\n\r\n  &:not(:last-child) {\r\n    border-bottom: solid 1px black;\r\n  }\r\n\r\n  ${props =>\r\n    props.score && props.score > 0\r\n      ? `color: darkgreen; background-color: #90d8a7;`\r\n      : ``};\r\n\r\n  ${props =>\r\n    props.score && props.score < 0\r\n      ? `color: darkred; background-color: #db9f9f;`\r\n      : ``};\r\n`;\r\n\r\nconst textScore = score => {\r\n  if (score < 0) {\r\n    return [\r\n      \"\",\r\n      \"1st\",\r\n      \"2nd\",\r\n      \"3rd\",\r\n      \"4th\",\r\n      \"5th\",\r\n      \"6th\",\r\n      \"7th\",\r\n      \"8th\",\r\n      \"9th\",\r\n      \"10th\",\r\n      \"11th\",\r\n      \"12th\"\r\n    ][-score];\r\n  } else if (score === 1) {\r\n    return `1 life left`;\r\n  }\r\n  return `${score} lives left`;\r\n};\r\n\r\nexport const ScoreCard = props => {\r\n  const { players, killer = false } = props;\r\n\r\n  if (players && players.length) {\r\n    return (\r\n      <div>\r\n        <h4>Current score</h4>\r\n        <ScoreDiv>\r\n          <Cell>Name</Cell>\r\n          <Cell>Score</Cell>\r\n        </ScoreDiv>\r\n        <>\r\n          {players\r\n            .sort((a, b) => b.score - a.score)\r\n            .map(p => (\r\n              <ScoreDiv score={p.score} key={p.name}>\r\n                <Cell>{p.name}</Cell>\r\n                <Cell>{killer ? textScore(p.score) : p.score}</Cell>\r\n              </ScoreDiv>\r\n            ))}\r\n        </>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const WhoseTurnNow = styled.div`\r\n  margin: auto;\r\n  margin-top: 10px;\r\n  sfont-size: 24px;\r\n  border: 1px solid black;\r\n  border-radius: 8px;\r\n  background-color: yellow;\r\n  width: 20%;\r\n  min-width: 200px;\r\n  height: 100px;\r\n`;\r\n\r\nexport const ScoreButtonHolder = styled.div`\r\n  display: flex;\r\n  max-width: 90%;\r\n  margin: auto;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","export const shuffle = array => {\r\n  let counter = array.length;\r\n\r\n  // While there are elements in the array\r\n  while (counter > 0) {\r\n    // Pick a random index\r\n    let index = Math.floor(Math.random() * counter);\r\n\r\n    // Decrease counter by 1\r\n    counter--;\r\n\r\n    // And swap the last element with it\r\n    let temp = array[counter];\r\n    array[counter] = array[index];\r\n    array[index] = temp;\r\n  }\r\n\r\n  return array;\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { ActionButton } from \"./ActionButton\";\r\nimport { ScoreCard } from \"./ScoreCard\";\r\nimport { WhoseTurnNow, ScoreButtonHolder } from \"./components/WhoseTurnNow\";\r\n\r\nimport { shuffle } from \"./utils/shuffle\";\r\n\r\nconst scoreFun = ({ foul, pot, nine }) => pot + !foul * 4.5 * nine - 1.5 * foul;\r\n\r\nconst random = count => Math.floor(Math.random() * count);\r\n\r\nclass PlayState {\r\n  constructor(players) {\r\n    this.foul = false;\r\n    this.miss = false;\r\n    this.pot = 0;\r\n    this.nine = false;\r\n    this.gameOver = false;\r\n\r\n    let playersCopy = [...players];\r\n\r\n    let idx = random(playersCopy.length);\r\n    this.current = playersCopy[idx].name;\r\n    playersCopy.splice(idx, 1);\r\n    idx = random(playersCopy.length);\r\n    this.previous = playersCopy[idx].name;\r\n    playersCopy.splice(idx, 1);\r\n\r\n    shuffle(playersCopy);\r\n    this.next = playersCopy.map(p => p.name);\r\n  }\r\n}\r\n\r\nconst Nineball = props => {\r\n  const { home } = props;\r\n  const [players, setPlayers] = useState(props.players);\r\n\r\n  const [turnState, setTurnState] = useState(new PlayState(players));\r\n\r\n  const setPlayState = action => {\r\n    let thisState = { ...turnState };\r\n    if (action === \"reset\") {\r\n      thisState.foul = false;\r\n      thisState.miss = false;\r\n      thisState.pot = 0;\r\n      thisState.nine = false;\r\n    } else if (action === \"foul\") {\r\n      thisState.foul = !thisState.foul;\r\n    } else if (action === \"miss\") {\r\n      thisState.miss = !thisState.miss;\r\n    } else if (action === \"pot\") {\r\n      thisState.pot += 1;\r\n    } else if (action === \"nine\") {\r\n      thisState.nine = !thisState.nine;\r\n    } else if (action === \"submit\") {\r\n      if (!thisState.foul && !thisState.miss && !thisState.nine) {\r\n        thisState.pot = 0;\r\n      } else {\r\n        let score = scoreFun(thisState);\r\n        let thisPlayers = [...players];\r\n        let currentPlayer = thisPlayers.find(p => p.name === thisState.current);\r\n        currentPlayer.score += score;\r\n\r\n        let next, previous, current;\r\n\r\n        if (thisState.nine) {\r\n          current = thisState.current;\r\n          previous = thisState.previous;\r\n          next = thisState.next;\r\n        } else if (thisState.foul && thisState.pot === 0) {\r\n          current = thisState.previous;\r\n          previous = thisState.current;\r\n          next = thisState.next.reverse();\r\n        } else {\r\n          current = thisState.next[0];\r\n          previous = thisState.current;\r\n          next = thisState.next.slice(1);\r\n          next.push(thisState.previous);\r\n        }\r\n\r\n        if (thisState.nine) {\r\n          thisState.gameOver = true;\r\n        }\r\n\r\n        thisState.current = current;\r\n        thisState.previous = previous;\r\n        thisState.next = next;\r\n\r\n        thisState.foul = false;\r\n        thisState.miss = false;\r\n        thisState.pot = 0;\r\n\r\n        setPlayers(thisPlayers);\r\n      }\r\n    } else if (action === \"new-round\") {\r\n      thisState.gameOver = true;\r\n    }\r\n\r\n    setTurnState(thisState);\r\n  };\r\n\r\n  const newGame = () => {\r\n    setTurnState(new PlayState(players));\r\n  };\r\n\r\n  if (turnState.gameOver) {\r\n    return (\r\n      <div>\r\n        <ScoreCard players={players} />\r\n        <ScoreButtonHolder>\r\n          <ActionButton onClick={newGame} nine={true}>\r\n            New round\r\n          </ActionButton>\r\n          <ActionButton onClick={home} pot={true}>\r\n            Home\r\n          </ActionButton>\r\n        </ScoreButtonHolder>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <WhoseTurnNow>\r\n          <h4>{turnState.current}</h4>\r\n          <h4>It's your turn</h4>\r\n        </WhoseTurnNow>\r\n      </div>\r\n      <div>\r\n        <h4>Action</h4>\r\n        <ScoreButtonHolder>\r\n          <ActionButton\r\n            onClick={() => setPlayState(\"foul\")}\r\n            foul={turnState.foul}\r\n          >\r\n            Foul\r\n          </ActionButton>\r\n          <ActionButton\r\n            onClick={() => setPlayState(\"miss\")}\r\n            miss={turnState.miss}\r\n          >\r\n            Miss\r\n          </ActionButton>\r\n          <ActionButton onClick={() => setPlayState(\"pot\")} pot={turnState.pot}>\r\n            Potted {turnState.pot}\r\n          </ActionButton>\r\n          <ActionButton\r\n            onClick={() => setPlayState(\"nine\")}\r\n            nine={turnState.nine}\r\n          >\r\n            Nine\r\n          </ActionButton>\r\n        </ScoreButtonHolder>\r\n        <ScoreButtonHolder>\r\n          <ActionButton\r\n            onClick={() => setPlayState(\"reset\")}\r\n            foul={\r\n              turnState.foul ||\r\n              turnState.nine ||\r\n              turnState.miss ||\r\n              turnState.pot\r\n            }\r\n          >\r\n            Reset\r\n          </ActionButton>\r\n          <ActionButton\r\n            onClick={() => setPlayState(\"submit\")}\r\n            pot={turnState.foul || turnState.nine || turnState.miss}\r\n          >\r\n            Submit\r\n          </ActionButton>\r\n          <ActionButton onClick={() => setPlayState(\"new-round\")}>\r\n            New Round\r\n          </ActionButton>\r\n        </ScoreButtonHolder>\r\n      </div>\r\n      <div>\r\n        <h4>Who's next</h4>\r\n        <ActionButton foul={true}>\r\n          <h4>On Foul</h4>\r\n          <h4>{turnState.pot > 0 ? turnState.next : turnState.previous}</h4>\r\n        </ActionButton>\r\n        <ActionButton miss={true}>\r\n          <h4>On Miss</h4>\r\n          <h4>{turnState.next[0]}</h4>\r\n        </ActionButton>\r\n      </div>\r\n      <ScoreCard players={players} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nineball;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Vertical } from \"./components/Layout\";\r\nimport { ActionButton } from \"./ActionButton\";\r\nimport { WhoseTurnNow, ScoreButtonHolder } from \"./components/WhoseTurnNow\";\r\nimport { ScoreCard } from \"./ScoreCard\";\r\n\r\nimport { shuffle } from \"./utils/shuffle\";\r\n\r\nconst setScores = players => {\r\n  for (let i = 0; i < players.length; i++) {\r\n    players[i].score = 2;\r\n  }\r\n\r\n  return players;\r\n};\r\n\r\nclass PlayState {\r\n  constructor(players) {\r\n    this.gameOver = false;\r\n    this.next = shuffle(players.map(p => p.name));\r\n    this.nextRound = [];\r\n    this.random = false;\r\n  }\r\n}\r\n\r\nconst handleTurnEnd = st => {\r\n  if (st.random) {\r\n    let move = st.next.shift();\r\n    if (!st.next.includes(move)) {\r\n      st.nextRound.push(move);\r\n    }\r\n    if (st.next.length === 1) {\r\n      st.nextRound.push(st.next[0]);\r\n      st.nextRound = shuffle(st.nextRound);\r\n      st.next = st.next.concat(st.nextRound);\r\n      st.nextRound = [];\r\n    }\r\n  } else {\r\n    toEnd(st.next);\r\n  }\r\n};\r\n\r\nconst handleOut = (st, name) => {\r\n  st.next.shift();\r\n  let idx = st.next.findIndex(n => n === name);\r\n  if (idx !== -1) {\r\n    st.next.splice(idx, 1);\r\n  }\r\n};\r\n\r\nconst toEnd = arr => {\r\n  let move = arr.shift();\r\n  arr.push(move);\r\n};\r\n\r\nconst Killer = props => {\r\n  const { home } = props;\r\n  const [players, setPlayers] = useState([]);\r\n  const [turnState, setTurnState] = useState({});\r\n\r\n  const newGame = () => {\r\n    setPlayers(setScores(props.players));\r\n    setTurnState(new PlayState(props.players));\r\n  };\r\n\r\n  useEffect(newGame, [props.players]);\r\n\r\n  const setPlayState = action => {\r\n    let thisTurnState = { ...turnState };\r\n\r\n    if (action === \"miss\") {\r\n      let thisPlayers = [...players];\r\n      let player = thisPlayers.find(p => p.name === turnState.next[0]);\r\n      player.score -= 1;\r\n      if (player.score === 0) {\r\n        player.score = -thisTurnState.next.length;\r\n        handleOut(thisTurnState, player.name);\r\n      } else {\r\n        handleTurnEnd(thisTurnState);\r\n      }\r\n      if (thisTurnState.next.length + thisTurnState.nextRound.length === 1) {\r\n        thisTurnState.gameOver = true;\r\n      }\r\n      setPlayers(thisPlayers);\r\n    } else if (action === \"pot\") {\r\n      handleTurnEnd(thisTurnState);\r\n    } else if (action === \"black\") {\r\n      let thisPlayers = [...players];\r\n      let player = thisPlayers.find(p => p.name === turnState.next[0]);\r\n      player.score += 1;\r\n      handleTurnEnd(thisTurnState);\r\n      setPlayers(thisPlayers);\r\n    }\r\n\r\n    setTurnState(thisTurnState);\r\n  };\r\n\r\n  const addALife = () => {\r\n    let thisPlayers = [...players];\r\n\r\n    for (let i = 0; i < thisPlayers.length; i++) {\r\n      thisPlayers[i].score += 1;\r\n    }\r\n\r\n    setPlayers(thisPlayers);\r\n  };\r\n\r\n  const toggleRandomOrder = () => {\r\n    let thisTurnState = { ...turnState };\r\n    thisTurnState.random = !thisTurnState.random;\r\n    setTurnState(thisTurnState);\r\n  };\r\n\r\n  if (turnState.gameOver) {\r\n    return (\r\n      <Vertical>\r\n        <ScoreCard killer={true} players={players} />\r\n        <ActionButton onClick={newGame} nine={true}>\r\n          New game\r\n        </ActionButton>\r\n        <ActionButton onClick={home} pot={true}>\r\n          Home\r\n        </ActionButton>\r\n      </Vertical>\r\n    );\r\n  }\r\n\r\n  if (players.length) {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <WhoseTurnNow>\r\n            <h4>{turnState.next[0]}</h4>\r\n            <h4>It's your turn</h4>\r\n          </WhoseTurnNow>\r\n        </div>\r\n        <div>\r\n          <h4>Action</h4>\r\n          <ScoreButtonHolder>\r\n            <ActionButton\r\n              onClick={() => setPlayState(\"miss\")}\r\n              miss={true}\r\n              style={{ width: \"33.3%\" }}\r\n            >\r\n              Miss\r\n            </ActionButton>\r\n            <ActionButton\r\n              onClick={() => setPlayState(\"pot\")}\r\n              pot={true}\r\n              style={{ width: \"33.3%\" }}\r\n            >\r\n              Potted\r\n            </ActionButton>\r\n            <ActionButton\r\n              onClick={() => setPlayState(\"black\")}\r\n              nine={true}\r\n              style={{ width: \"33.3%\" }}\r\n            >\r\n              Pot black\r\n            </ActionButton>\r\n          </ScoreButtonHolder>\r\n        </div>\r\n        <div>\r\n          <h4>Who is next</h4>\r\n          <ActionButton>\r\n            <h4>Next</h4>\r\n            <h4>{turnState.next[1]}</h4>\r\n          </ActionButton>\r\n          {turnState.next.length > 2 ? (\r\n            <ActionButton>\r\n              <h4>And then</h4>\r\n              <h4>{turnState.next[2]}</h4>\r\n            </ActionButton>\r\n          ) : null}\r\n        </div>\r\n        <ScoreCard killer={true} players={players} />\r\n        <div>\r\n          <ActionButton nine={true} small={true} onClick={addALife}>\r\n            Extra life\r\n          </ActionButton>\r\n          <ActionButton\r\n            miss={turnState.random}\r\n            small={true}\r\n            onClick={toggleRandomOrder}\r\n          >\r\n            Random order\r\n          </ActionButton>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default Killer;\r\n","export class Player {\r\n  constructor(name) {\r\n    this.name = name;\r\n    this.selected = false;\r\n    this.score = 0;\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { ActionButton } from \"./ActionButton\";\r\nimport { Player } from \"./Player\";\r\n\r\nconst PlayerHolder = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  margin: auto;\r\n  max-width: 800px;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst PlayerUI = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 18px;\r\n  font-weight: 500;\r\n  margin: 8px;\r\n  justify-content: center;\r\n  border: solid 1px black;\r\n  border-radius: 8px;\r\n  width: 150px;\r\n  height: 50px;\r\n\r\n  ${props => `\r\n    background-color: ${props.selected ? `lightgreen;` : `burlywood;`}\r\n\r\n    `}\r\n`;\r\n\r\nconst PS = styled.div`\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst PlayerInput = styled.input`\r\n  border: 1px solid black;\r\n  margin-right: 10px;\r\n  border-radius: 8px;\r\n  font-size: 18px;\r\n  padding: 3px;\r\n  height: 34px;\r\n`;\r\n\r\nconst AddPlayerButton = styled.button`\r\n  border: 1px solid black;\r\n  border-radius: 8px;\r\n  height: 40px;\r\n  font-size: 18px;\r\n`;\r\n\r\nconst playerRostom = [\"Adriana\", \"Alex\", \"Marcus\", \"Peter\", \"Petra\"];\r\n\r\nexport const PlayerSelect = props => {\r\n  const { callback } = props;\r\n\r\n  const [players, setPlayers] = useState(playerRostom.map(p => new Player(p)));\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n\r\n  const togglePlayer = p => {\r\n    let newPlayer = [...players];\r\n    let player = players.find(pl => pl === p);\r\n    player.selected = !player.selected;\r\n    setPlayers(newPlayer);\r\n  };\r\n\r\n  const addPlayer = p => {\r\n    let newPlayer = [...players];\r\n    newPlayer.push({ name: p, score: 0, selected: true });\r\n    setPlayers(newPlayer);\r\n  };\r\n\r\n  const onStart = () => {\r\n    callback(players.filter(p => p.selected));\r\n  };\r\n\r\n  return (\r\n    <PS>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          addPlayer(playerName);\r\n          setPlayerName(\"\");\r\n        }}\r\n      >\r\n        <PlayerInput\r\n          type=\"text\"\r\n          value={playerName}\r\n          onChange={e => setPlayerName(e.target.value)}\r\n        />\r\n        <AddPlayerButton>Add</AddPlayerButton>\r\n      </form>\r\n\r\n      <PlayerHolder>\r\n        {players.map(p => (\r\n          <PlayerUI\r\n            onClick={() => togglePlayer(p)}\r\n            key={p.name}\r\n            selected={p.selected}\r\n          >\r\n            {p.name}\r\n          </PlayerUI>\r\n        ))}\r\n      </PlayerHolder>\r\n\r\n      <ActionButton\r\n        onClick={onStart}\r\n        nine={players.filter(p => p.selected).length > 1}\r\n      >\r\n        Save\r\n      </ActionButton>\r\n    </PS>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Vertical } from \"./components/Layout\";\r\nimport { ActionButton } from \"./ActionButton\";\r\n\r\nimport Nineball from \"./Nineball\";\r\nimport Killer from \"./Killer\";\r\nimport { PlayerSelect } from \"./PlayerSelect\";\r\n\r\nconst Home = () => {\r\n  const [mode, setMode] = useState(\"\");\r\n  const [players, setPlayers] = useState([]);\r\n\r\n  const playerSelectCallback = p => {\r\n    setPlayers(p);\r\n    setMode(\"\");\r\n  };\r\n\r\n  if (mode === \"killer\") {\r\n    return <Killer players={players} home={() => setMode(\"\")} />;\r\n  } else if (mode === \"nine\") {\r\n    return <Nineball players={players} home={() => setMode(\"\")} />;\r\n  } else if (mode === \"playerSelect\") {\r\n    return <PlayerSelect callback={playerSelectCallback} />;\r\n  }\r\n\r\n  return (\r\n    <Vertical>\r\n      <ActionButton\r\n        onClick={() => setMode(\"playerSelect\")}\r\n        pot={players.length > 1}\r\n      >\r\n        Select players\r\n      </ActionButton>\r\n      <ActionButton\r\n        onClick={() => {\r\n          if (players.length > 2) setMode(\"killer\");\r\n        }}\r\n        nine={players.length > 2}\r\n      >\r\n        Killer pool\r\n      </ActionButton>\r\n      <ActionButton\r\n        onClick={() => {\r\n          if (players.length > 2) setMode(\"nine\");\r\n        }}\r\n        nine={players.length > 2}\r\n      >\r\n        9 ball pool\r\n      </ActionButton>\r\n    </Vertical>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Home from \"./pool/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}